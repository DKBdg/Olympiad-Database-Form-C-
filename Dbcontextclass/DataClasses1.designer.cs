#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dbcontextclass
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OlympiadDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertT_City(T_City instance);
    partial void UpdateT_City(T_City instance);
    partial void DeleteT_City(T_City instance);
    partial void InsertT_Country(T_Country instance);
    partial void UpdateT_Country(T_Country instance);
    partial void DeleteT_Country(T_Country instance);
    partial void InsertT_CProfile(T_CProfile instance);
    partial void UpdateT_CProfile(T_CProfile instance);
    partial void DeleteT_CProfile(T_CProfile instance);
    partial void InsertT_Medal(T_Medal instance);
    partial void UpdateT_Medal(T_Medal instance);
    partial void DeleteT_Medal(T_Medal instance);
    partial void InsertT_Olympiad(T_Olympiad instance);
    partial void UpdateT_Olympiad(T_Olympiad instance);
    partial void DeleteT_Olympiad(T_Olympiad instance);
    partial void InsertT_Player(T_Player instance);
    partial void UpdateT_Player(T_Player instance);
    partial void DeleteT_Player(T_Player instance);
    partial void InsertT_Sport(T_Sport instance);
    partial void UpdateT_Sport(T_Sport instance);
    partial void DeleteT_Sport(T_Sport instance);
    partial void InsertT_SportType(T_SportType instance);
    partial void UpdateT_SportType(T_SportType instance);
    partial void DeleteT_SportType(T_SportType instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Dbcontextclass.Properties.Settings.Default.OlympiadDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<T_City> T_Cities
		{
			get
			{
				return this.GetTable<T_City>();
			}
		}
		
		public System.Data.Linq.Table<T_Country> T_Countries
		{
			get
			{
				return this.GetTable<T_Country>();
			}
		}
		
		public System.Data.Linq.Table<T_CProfile> T_CProfiles
		{
			get
			{
				return this.GetTable<T_CProfile>();
			}
		}
		
		public System.Data.Linq.Table<T_Medal> T_Medals
		{
			get
			{
				return this.GetTable<T_Medal>();
			}
		}
		
		public System.Data.Linq.Table<T_Olympiad> T_Olympiads
		{
			get
			{
				return this.GetTable<T_Olympiad>();
			}
		}
		
		public System.Data.Linq.Table<T_Player> T_Players
		{
			get
			{
				return this.GetTable<T_Player>();
			}
		}
		
		public System.Data.Linq.Table<T_Sport> T_Sports
		{
			get
			{
				return this.GetTable<T_Sport>();
			}
		}
		
		public System.Data.Linq.Table<T_SportType> T_SportTypes
		{
			get
			{
				return this.GetTable<T_SportType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Cities")]
	public partial class T_City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _CityName;
		
		private System.Nullable<long> _CountryID;
		
		private EntitySet<T_Olympiad> _T_Olympiads;
		
		private EntityRef<T_Country> _T_Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnCountryIDChanging(System.Nullable<long> value);
    partial void OnCountryIDChanged();
    #endregion
		
		public T_City()
		{
			this._T_Olympiads = new EntitySet<T_Olympiad>(new Action<T_Olympiad>(this.attach_T_Olympiads), new Action<T_Olympiad>(this.detach_T_Olympiads));
			this._T_Country = default(EntityRef<T_Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(40)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="BigInt")]
		public System.Nullable<long> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._T_Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_City_T_Olympiad", Storage="_T_Olympiads", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<T_Olympiad> T_Olympiads
		{
			get
			{
				return this._T_Olympiads;
			}
			set
			{
				this._T_Olympiads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Country_T_City", Storage="_T_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public T_Country T_Country
		{
			get
			{
				return this._T_Country.Entity;
			}
			set
			{
				T_Country previousValue = this._T_Country.Entity;
				if (((previousValue != value) 
							|| (this._T_Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_Country.Entity = null;
						previousValue.T_Cities.Remove(this);
					}
					this._T_Country.Entity = value;
					if ((value != null))
					{
						value.T_Cities.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<long>);
					}
					this.SendPropertyChanged("T_Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_Olympiads(T_Olympiad entity)
		{
			this.SendPropertyChanging();
			entity.T_City = this;
		}
		
		private void detach_T_Olympiads(T_Olympiad entity)
		{
			this.SendPropertyChanging();
			entity.T_City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Countries")]
	public partial class T_Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _CountryName;
		
		private EntitySet<T_City> _T_Cities;
		
		private EntitySet<T_Player> _T_Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public T_Country()
		{
			this._T_Cities = new EntitySet<T_City>(new Action<T_City>(this.attach_T_Cities), new Action<T_City>(this.detach_T_Cities));
			this._T_Players = new EntitySet<T_Player>(new Action<T_Player>(this.attach_T_Players), new Action<T_Player>(this.detach_T_Players));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(40)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Country_T_City", Storage="_T_Cities", ThisKey="ID", OtherKey="CountryID")]
		public EntitySet<T_City> T_Cities
		{
			get
			{
				return this._T_Cities;
			}
			set
			{
				this._T_Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Country_T_Player", Storage="_T_Players", ThisKey="ID", OtherKey="CountryID")]
		public EntitySet<T_Player> T_Players
		{
			get
			{
				return this._T_Players;
			}
			set
			{
				this._T_Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_Cities(T_City entity)
		{
			this.SendPropertyChanging();
			entity.T_Country = this;
		}
		
		private void detach_T_Cities(T_City entity)
		{
			this.SendPropertyChanging();
			entity.T_Country = null;
		}
		
		private void attach_T_Players(T_Player entity)
		{
			this.SendPropertyChanging();
			entity.T_Country = this;
		}
		
		private void detach_T_Players(T_Player entity)
		{
			this.SendPropertyChanging();
			entity.T_Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_CProfiles")]
	public partial class T_CProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _PlayerID;
		
		private System.Nullable<long> _SportID;
		
		private EntitySet<T_Medal> _T_Medals;
		
		private EntityRef<T_Player> _T_Player;
		
		private EntityRef<T_Sport> _T_Sport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPlayerIDChanging(System.Nullable<long> value);
    partial void OnPlayerIDChanged();
    partial void OnSportIDChanging(System.Nullable<long> value);
    partial void OnSportIDChanged();
    #endregion
		
		public T_CProfile()
		{
			this._T_Medals = new EntitySet<T_Medal>(new Action<T_Medal>(this.attach_T_Medals), new Action<T_Medal>(this.detach_T_Medals));
			this._T_Player = default(EntityRef<T_Player>);
			this._T_Sport = default(EntityRef<T_Sport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="BigInt")]
		public System.Nullable<long> PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._T_Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SportID", DbType="BigInt")]
		public System.Nullable<long> SportID
		{
			get
			{
				return this._SportID;
			}
			set
			{
				if ((this._SportID != value))
				{
					if (this._T_Sport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSportIDChanging(value);
					this.SendPropertyChanging();
					this._SportID = value;
					this.SendPropertyChanged("SportID");
					this.OnSportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_CProfile_T_Medal", Storage="_T_Medals", ThisKey="ID", OtherKey="ProfileID")]
		public EntitySet<T_Medal> T_Medals
		{
			get
			{
				return this._T_Medals;
			}
			set
			{
				this._T_Medals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Player_T_CProfile", Storage="_T_Player", ThisKey="PlayerID", OtherKey="ID", IsForeignKey=true)]
		public T_Player T_Player
		{
			get
			{
				return this._T_Player.Entity;
			}
			set
			{
				T_Player previousValue = this._T_Player.Entity;
				if (((previousValue != value) 
							|| (this._T_Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_Player.Entity = null;
						previousValue.T_CProfiles.Remove(this);
					}
					this._T_Player.Entity = value;
					if ((value != null))
					{
						value.T_CProfiles.Add(this);
						this._PlayerID = value.ID;
					}
					else
					{
						this._PlayerID = default(Nullable<long>);
					}
					this.SendPropertyChanged("T_Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Sport_T_CProfile", Storage="_T_Sport", ThisKey="SportID", OtherKey="ID", IsForeignKey=true)]
		public T_Sport T_Sport
		{
			get
			{
				return this._T_Sport.Entity;
			}
			set
			{
				T_Sport previousValue = this._T_Sport.Entity;
				if (((previousValue != value) 
							|| (this._T_Sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_Sport.Entity = null;
						previousValue.T_CProfiles.Remove(this);
					}
					this._T_Sport.Entity = value;
					if ((value != null))
					{
						value.T_CProfiles.Add(this);
						this._SportID = value.ID;
					}
					else
					{
						this._SportID = default(Nullable<long>);
					}
					this.SendPropertyChanged("T_Sport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_Medals(T_Medal entity)
		{
			this.SendPropertyChanging();
			entity.T_CProfile = this;
		}
		
		private void detach_T_Medals(T_Medal entity)
		{
			this.SendPropertyChanging();
			entity.T_CProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Medals")]
	public partial class T_Medal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Rarity;
		
		private System.Nullable<long> _ProfileID;
		
		private EntityRef<T_CProfile> _T_CProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnRarityChanging(string value);
    partial void OnRarityChanged();
    partial void OnProfileIDChanging(System.Nullable<long> value);
    partial void OnProfileIDChanged();
    #endregion
		
		public T_Medal()
		{
			this._T_CProfile = default(EntityRef<T_CProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rarity", DbType="NVarChar(40)")]
		public string Rarity
		{
			get
			{
				return this._Rarity;
			}
			set
			{
				if ((this._Rarity != value))
				{
					this.OnRarityChanging(value);
					this.SendPropertyChanging();
					this._Rarity = value;
					this.SendPropertyChanged("Rarity");
					this.OnRarityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileID", DbType="BigInt")]
		public System.Nullable<long> ProfileID
		{
			get
			{
				return this._ProfileID;
			}
			set
			{
				if ((this._ProfileID != value))
				{
					if (this._T_CProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileID = value;
					this.SendPropertyChanged("ProfileID");
					this.OnProfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_CProfile_T_Medal", Storage="_T_CProfile", ThisKey="ProfileID", OtherKey="ID", IsForeignKey=true)]
		public T_CProfile T_CProfile
		{
			get
			{
				return this._T_CProfile.Entity;
			}
			set
			{
				T_CProfile previousValue = this._T_CProfile.Entity;
				if (((previousValue != value) 
							|| (this._T_CProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_CProfile.Entity = null;
						previousValue.T_Medals.Remove(this);
					}
					this._T_CProfile.Entity = value;
					if ((value != null))
					{
						value.T_Medals.Add(this);
						this._ProfileID = value.ID;
					}
					else
					{
						this._ProfileID = default(Nullable<long>);
					}
					this.SendPropertyChanged("T_CProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Olympiads")]
	public partial class T_Olympiad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _CityID;
		
		private string _Season;
		
		private System.Nullable<System.DateTime> _OlympiadDate;
		
		private EntitySet<T_Sport> _T_Sports;
		
		private EntityRef<T_City> _T_City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(System.Nullable<long> value);
    partial void OnCityIDChanged();
    partial void OnSeasonChanging(string value);
    partial void OnSeasonChanged();
    partial void OnOlympiadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOlympiadDateChanged();
    #endregion
		
		public T_Olympiad()
		{
			this._T_Sports = new EntitySet<T_Sport>(new Action<T_Sport>(this.attach_T_Sports), new Action<T_Sport>(this.detach_T_Sports));
			this._T_City = default(EntityRef<T_City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="BigInt")]
		public System.Nullable<long> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._T_City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season", DbType="NVarChar(40)")]
		public string Season
		{
			get
			{
				return this._Season;
			}
			set
			{
				if ((this._Season != value))
				{
					this.OnSeasonChanging(value);
					this.SendPropertyChanging();
					this._Season = value;
					this.SendPropertyChanged("Season");
					this.OnSeasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OlympiadDate", DbType="Date")]
		public System.Nullable<System.DateTime> OlympiadDate
		{
			get
			{
				return this._OlympiadDate;
			}
			set
			{
				if ((this._OlympiadDate != value))
				{
					this.OnOlympiadDateChanging(value);
					this.SendPropertyChanging();
					this._OlympiadDate = value;
					this.SendPropertyChanged("OlympiadDate");
					this.OnOlympiadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Olympiad_T_Sport", Storage="_T_Sports", ThisKey="ID", OtherKey="OlympiadID")]
		public EntitySet<T_Sport> T_Sports
		{
			get
			{
				return this._T_Sports;
			}
			set
			{
				this._T_Sports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_City_T_Olympiad", Storage="_T_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public T_City T_City
		{
			get
			{
				return this._T_City.Entity;
			}
			set
			{
				T_City previousValue = this._T_City.Entity;
				if (((previousValue != value) 
							|| (this._T_City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_City.Entity = null;
						previousValue.T_Olympiads.Remove(this);
					}
					this._T_City.Entity = value;
					if ((value != null))
					{
						value.T_Olympiads.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(Nullable<long>);
					}
					this.SendPropertyChanged("T_City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_Sports(T_Sport entity)
		{
			this.SendPropertyChanging();
			entity.T_Olympiad = this;
		}
		
		private void detach_T_Sports(T_Sport entity)
		{
			this.SendPropertyChanging();
			entity.T_Olympiad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Players")]
	public partial class T_Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<long> _CountryID;
		
		private EntitySet<T_CProfile> _T_CProfiles;
		
		private EntityRef<T_Country> _T_Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnCountryIDChanging(System.Nullable<long> value);
    partial void OnCountryIDChanged();
    #endregion
		
		public T_Player()
		{
			this._T_CProfiles = new EntitySet<T_CProfile>(new Action<T_CProfile>(this.attach_T_CProfiles), new Action<T_CProfile>(this.detach_T_CProfiles));
			this._T_Country = default(EntityRef<T_Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(40)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(40)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="BigInt")]
		public System.Nullable<long> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._T_Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Player_T_CProfile", Storage="_T_CProfiles", ThisKey="ID", OtherKey="PlayerID")]
		public EntitySet<T_CProfile> T_CProfiles
		{
			get
			{
				return this._T_CProfiles;
			}
			set
			{
				this._T_CProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Country_T_Player", Storage="_T_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public T_Country T_Country
		{
			get
			{
				return this._T_Country.Entity;
			}
			set
			{
				T_Country previousValue = this._T_Country.Entity;
				if (((previousValue != value) 
							|| (this._T_Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_Country.Entity = null;
						previousValue.T_Players.Remove(this);
					}
					this._T_Country.Entity = value;
					if ((value != null))
					{
						value.T_Players.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<long>);
					}
					this.SendPropertyChanged("T_Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_CProfiles(T_CProfile entity)
		{
			this.SendPropertyChanging();
			entity.T_Player = this;
		}
		
		private void detach_T_CProfiles(T_CProfile entity)
		{
			this.SendPropertyChanging();
			entity.T_Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Sports")]
	public partial class T_Sport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _OlympiadID;
		
		private System.Nullable<long> _SportTypeID;
		
		private EntitySet<T_CProfile> _T_CProfiles;
		
		private EntityRef<T_Olympiad> _T_Olympiad;
		
		private EntityRef<T_SportType> _T_SportType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnOlympiadIDChanging(System.Nullable<long> value);
    partial void OnOlympiadIDChanged();
    partial void OnSportTypeIDChanging(System.Nullable<long> value);
    partial void OnSportTypeIDChanged();
    #endregion
		
		public T_Sport()
		{
			this._T_CProfiles = new EntitySet<T_CProfile>(new Action<T_CProfile>(this.attach_T_CProfiles), new Action<T_CProfile>(this.detach_T_CProfiles));
			this._T_Olympiad = default(EntityRef<T_Olympiad>);
			this._T_SportType = default(EntityRef<T_SportType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OlympiadID", DbType="BigInt")]
		public System.Nullable<long> OlympiadID
		{
			get
			{
				return this._OlympiadID;
			}
			set
			{
				if ((this._OlympiadID != value))
				{
					if (this._T_Olympiad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOlympiadIDChanging(value);
					this.SendPropertyChanging();
					this._OlympiadID = value;
					this.SendPropertyChanged("OlympiadID");
					this.OnOlympiadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SportTypeID", DbType="BigInt")]
		public System.Nullable<long> SportTypeID
		{
			get
			{
				return this._SportTypeID;
			}
			set
			{
				if ((this._SportTypeID != value))
				{
					if (this._T_SportType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSportTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SportTypeID = value;
					this.SendPropertyChanged("SportTypeID");
					this.OnSportTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Sport_T_CProfile", Storage="_T_CProfiles", ThisKey="ID", OtherKey="SportID")]
		public EntitySet<T_CProfile> T_CProfiles
		{
			get
			{
				return this._T_CProfiles;
			}
			set
			{
				this._T_CProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Olympiad_T_Sport", Storage="_T_Olympiad", ThisKey="OlympiadID", OtherKey="ID", IsForeignKey=true)]
		public T_Olympiad T_Olympiad
		{
			get
			{
				return this._T_Olympiad.Entity;
			}
			set
			{
				T_Olympiad previousValue = this._T_Olympiad.Entity;
				if (((previousValue != value) 
							|| (this._T_Olympiad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_Olympiad.Entity = null;
						previousValue.T_Sports.Remove(this);
					}
					this._T_Olympiad.Entity = value;
					if ((value != null))
					{
						value.T_Sports.Add(this);
						this._OlympiadID = value.ID;
					}
					else
					{
						this._OlympiadID = default(Nullable<long>);
					}
					this.SendPropertyChanged("T_Olympiad");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_SportType_T_Sport", Storage="_T_SportType", ThisKey="SportTypeID", OtherKey="ID", IsForeignKey=true)]
		public T_SportType T_SportType
		{
			get
			{
				return this._T_SportType.Entity;
			}
			set
			{
				T_SportType previousValue = this._T_SportType.Entity;
				if (((previousValue != value) 
							|| (this._T_SportType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_SportType.Entity = null;
						previousValue.T_Sports.Remove(this);
					}
					this._T_SportType.Entity = value;
					if ((value != null))
					{
						value.T_Sports.Add(this);
						this._SportTypeID = value.ID;
					}
					else
					{
						this._SportTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("T_SportType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_CProfiles(T_CProfile entity)
		{
			this.SendPropertyChanging();
			entity.T_Sport = this;
		}
		
		private void detach_T_CProfiles(T_CProfile entity)
		{
			this.SendPropertyChanging();
			entity.T_Sport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_SportTypes")]
	public partial class T_SportType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _SportName;
		
		private EntitySet<T_Sport> _T_Sports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSportNameChanging(string value);
    partial void OnSportNameChanged();
    #endregion
		
		public T_SportType()
		{
			this._T_Sports = new EntitySet<T_Sport>(new Action<T_Sport>(this.attach_T_Sports), new Action<T_Sport>(this.detach_T_Sports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SportName", DbType="NVarChar(40)")]
		public string SportName
		{
			get
			{
				return this._SportName;
			}
			set
			{
				if ((this._SportName != value))
				{
					this.OnSportNameChanging(value);
					this.SendPropertyChanging();
					this._SportName = value;
					this.SendPropertyChanged("SportName");
					this.OnSportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_SportType_T_Sport", Storage="_T_Sports", ThisKey="ID", OtherKey="SportTypeID")]
		public EntitySet<T_Sport> T_Sports
		{
			get
			{
				return this._T_Sports;
			}
			set
			{
				this._T_Sports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_Sports(T_Sport entity)
		{
			this.SendPropertyChanging();
			entity.T_SportType = this;
		}
		
		private void detach_T_Sports(T_Sport entity)
		{
			this.SendPropertyChanging();
			entity.T_SportType = null;
		}
	}
}
#pragma warning restore 1591
